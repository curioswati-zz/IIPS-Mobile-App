{
  "name": "passport-jwt",
  "version": "1.1.1",
  "description": "Passport authentication strategy using JSON Web Tokens",
  "main": "./lib",
  "scripts": {
    "test": "./node_modules/.bin/mocha --reporter spec --require test/bootstrap test/*test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/themikenicholson/passport-jwt.git"
  },
  "keywords": [
    "Passport",
    "Strategy",
    "JSON",
    "Web",
    "Token",
    "JWT"
  ],
  "author": {
    "name": "Mike Nicholson"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/themikenicholson/passport-jwt/issues"
  },
  "homepage": "https://github.com/themikenicholson/passport-jwt",
  "devDependencies": {
    "chai": "^1.9.2",
    "chai-passport-strategy": "^0.2.0",
    "mocha": "^2.0.1",
    "sinon": "^1.11.1"
  },
  "dependencies": {
    "jsonwebtoken": "^5.0.0",
    "passport-strategy": "^1.0.0"
  },
  "readme": "# passport-jwt\n\nA [Passport](http://passportjs.org/) strategy for authenticating with a\n[JSON Web Token](http://jwt.io).\n\nThis module lets you authenticate endpoints using a JSON Web token. It is\nintended to be used to secure RESTful endpoints without sessions.\n\n## Install\n\n    npm install passport-jwt\n\n## Usage\n\n### Configure Strategy\n\nThe jwt authentication strategy is constructed as follows:\n\n    new JwtStrategy(options, verify)\n\n`options` is an object literal containing options to control how the token is\nextracted from the request or verified.\n\n* `secretOrKey` is a REQUIRED string or buffer containing the secret\n  (symmetric) or PEM-encoded public key (asymmetric) for verifying the token's\n  signature.\n* `issuer`: If defined the token issuer (iss) will be verified against this\n  value.\n* `audience`: If defined, the token audience (aud) will be verified against\n  this value.\n* `tokenBodyField`: Field in a request body to search for the jwt.\n  Default is auth_token.\n* `tokenQueryParameterName`: Query parameter name containing the token.\n  Default is auth_token.\n* `authScheme`: Expected authorization scheme if token is submitted through\n  the HTTP Authorization header. Defaults to JWT\n* `passReqToCallback`: If true the request will be passed to the verify\n  callback. i.e. verify(request, jwt_payload, done_callback).\n\n`verify` is a function with args `verify(jwt_payload, done)`\n\n* `jwt_payload` is an object literal containing the decoded JWT payload.\n* `done` is a passport error first callback accepting arguments\n  done(error, user, info)\n\nAn example configuration:\n\n```js\nvar JwtStrategy = require('passport-jwt').Strategy;\nvar opts = {}\nopts.secretOrKey = 'secret';\nopts.issuer = \"accounts.examplesoft.com\";\nopts.audience = \"yoursite.net\";\npassport.use(new JwtStrategy(opts, function(jwt_payload, done) {\n    User.findOne({id: jwt_payload.sub}, function(err, user) {\n        if (err) {\n            return done(err, false);\n        }\n        if (user) {\n            done(null, user);\n        } else {\n            done(null, false);\n            // or you could create a new account\n        }\n    });\n}));\n```\n\n### Authenticate requests\n\nUse `passport.authenticate()` specifying `'jwt'` as the strategy.\n\n```js\napp.post('/profile', passport.authenticate('jwt', { session: false}),\n    function(req, res) {\n        res.send(req.user.profile);\n    }\n);\n```\n\n### Include the JWT in requests\n\nThe strategy will first check the request for the standard *Authorization*\nheader. If this header is present and the scheme matches `options.authScheme`\nor 'JWT' if no auth scheme was specified then the token will be retrieved from\nit. e.g.\n\n    Authorization: JWT JSON_WEB_TOKEN_STRING.....\n\nIf the authorization header with the expected scheme is not found, the request\nbody will be checked for a field matching either `options.tokenBodyField` or\n`auth_token` if the option was not specified.\n\nFinally, the URL query parameters will be checked for a field matching either\n`options.tokenQueryParameterName` or `auth_token` if the option was not\nsepcified.\n\n## Tests\n\n    npm install\n    npm test\n\n## License\n\nThe [MIT License](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2015 Mike Nicholson\n",
  "readmeFilename": "README.md",
  "_id": "passport-jwt@1.1.1",
  "dist": {
    "shasum": "1e8730d1de045ca117aade0c3cd382fe92d061d8"
  },
  "_from": "passport-jwt@",
  "_resolved": "https://registry.npmjs.org/passport-jwt/-/passport-jwt-1.1.1.tgz"
}
