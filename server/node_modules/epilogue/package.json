{
  "name": "epilogue",
  "description": "Create REST resources and controllers with Sequelize and Express or Restify",
  "version": "0.5.2",
  "author": {
    "name": "David Chester",
    "email": "dchester@shutterstock.com"
  },
  "contributors": [
    {
      "name": "Matt Broadstone",
      "email": "mbroadst@gmail.com"
    }
  ],
  "main": "lib/",
  "scripts": {
    "jshint": "jshint ./lib ./tests",
    "mocha": "mocha --check-leaks -R spec -u exports tests/*.test.js tests/**/*.test.js",
    "coverage": "istanbul cover node_modules/.bin/_mocha -- -- tests/*.test.js tests/**/*.test.js",
    "test": "npm run-script jshint && npm run-script mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/dchester/epilogue.git"
  },
  "bugs": {
    "url": "https://github.com/dchester/epilogue/issues"
  },
  "license": "MIT",
  "keywords": [
    "sequelize",
    "sequelizejs",
    "rest",
    "restful",
    "epilogue",
    "json",
    "api"
  ],
  "dependencies": {
    "bluebird": "^2.9.34",
    "inflection": "^1.7.1",
    "lodash": "^3.10.1",
    "merge-defaults": "^0.2.1"
  },
  "devDependencies": {
    "body-parser": "^1.13.3",
    "chai": "^3.2.0",
    "express": "^4.13.3",
    "istanbul": "^0.3.17",
    "jshint": "^2.8.0",
    "mocha": "^2.2.5",
    "request": "^2.60.0",
    "restify": "^3.0.3",
    "sequelize": "^3.5.1",
    "sqlite3": "^3.0.9"
  },
  "readme": "[![Build Status](https://travis-ci.org/dchester/epilogue.svg?branch=master)](https://travis-ci.org/dchester/epilogue) [![Dependency Status](https://david-dm.org/dchester/epilogue.svg)](https://david-dm.org/dchester/epilogue)\n\n# Epilogue\n\nCreate flexible REST endpoints and controllers from [Sequelize](http://www.sequelizejs.com/) models in your [Express](http://expressjs.com/) or [Restify](https://github.com/restify/node-restify) app.\n\n### Getting Started\n```javascript\nvar Sequelize = require('sequelize'),\n    epilogue = require('epilogue'),\n    http = require('http');\n\n// Define your models\nvar database = new Sequelize('database', 'root', 'password');\nvar User = database.define('User', {\n  username: Sequelize.STRING,\n  birthday: Sequelize.DATE\n});\n\n// Initialize server\nvar server, app;\nif (process.env.USE_RESTIFY) {\n  var restify = require('restify');\n\n  app = server = restify.createServer()\n  app.use(restify.queryParser());\n  app.use(restify.bodyParser());\n} else {\n  var express = require('express'),\n      bodyParser = require('body-parser');\n\n  var app = express();\n  app.use(bodyParser.json());\n  app.use(bodyParser.urlencoded({ extended: false }));\n  server = http.createServer(app);\n}\n\n// Initialize epilogue\nepilogue.initialize({\n  app: app,\n  sequelize: database\n});\n\n// Create REST resource\nvar userResource = epilogue.resource({\n  model: User,\n  endpoints: ['/users', '/users/:id']\n});\n\n// Create database and listen\ndatabase\n  .sync({ force: true })\n  .then(function() {\n    server.listen(function() {\n      var host = server.address().address,\n          port = server.address().port;\n\n      console.log('listening at http://%s:%s', host, port);\n    });\n  });\n```\n\n### Controllers and endpoints\n\nOn the server we now have the following controllers and endpoints:\n\nController | Endpoint | Description\n-----------|----------|------------\nusers.create | POST /users | Create a user\nusers.list | GET /users  | Get a listing of users\nusers.read | GET /users/:id | Get details about a user\nusers.update | PUT /users/:id | Update a user\nusers.delete | DELETE /users/:id | Delete a user\n\n### Customize behavior\n\nOf course it's likely that we'll want more flexibility.\nOur `users` resource has properties for each of the controller actions.\nController actions in turn have hooks for setting and overriding behavior at each step of the request.\nWe have these milestones to work with: `start`, `auth`, `fetch`, `data`, `write`, `send`, and `complete`.\n\n```javascript\nvar ForbiddenError = require('epilogue').Errors.ForbiddenError;\n\n// disallow deletes on users\nusers.delete.auth(function(req, res, context) {\n    throw new ForbiddenError(\"can't delete a user\");\n    // optionally:\n    // return context.error(403, \"can't delete a user\");\n})\n```\n\nWe can set behavior for milestones directly as above, or we can add functionality before and after milestones too:\n\n```javascript\n// check the cache first\nusers.list.fetch.before(function(req, res, context) {\n\tvar instance = cache.get(context.criteria);\n\n\tif (instance) {\n\t\t// keep a reference to the instance and skip the fetch\n\t\tcontext.instance = instance;\n\t\treturn context.skip;\n\t} else {\n\t\t// cache miss; we continue on\n\t\treturn context.continue;\n\t}\n})\n```\n\nMilestones can also be defined in a declarative fashion, and used as middleware with any resource. For example:\n\n```javascript\n// my-middleware.js\nmodule.exports = {\n  create: {\n    fetch: function(req, res, context) {\n      // manipulate the fetch call\n      return context.continue;\n    }\n  },\n  list: {\n    write: {\n      before: function(req, res, context) {\n        // modify data before writing list data\n        return context.continue;\n      },\n      action: function(req, res, context) {\n        // change behavior of actually writing the data\n        return context.continue;\n      },\n      after: function(req, res, context) {\n        // set some sort of flag after writing list data\n        return context.continue;\n      }\n    }\n  }\n};\n\n// my-app.js\nvar rest = require('epilogue'),\n    restMiddleware = require('my-middleware');\n\nrest.initialize({\n    app: app,\n    sequelize: sequelize\n});\n\nvar users = rest.resource({\n    model: User,\n    endpoints: ['/users', '/users/:id']\n});\n\nusers.use(restMiddleware);\n```\n\nEpilogue middleware also supports bundling in extra resource configuration by specifying\nan \"extraConfiguration\" member of the middleware like so:\n\n```javascript\n// my-middleware.js\nmodule.exports = {\n  extraConfiguration: function(resource) {\n    // support delete for plural form of a resource\n    var app = resource.app;\n    app.del(resource.endpoints.plural, function(req, res) {\n      resource.controllers.delete._control(req, res);\n    });\n  }\n};\n```\n\nTo show an error and halt execution of milestone functions you can throw an error:\n\n```javascript\nvar ForbiddenError = require('epilogue').Errors.ForbiddenError;\n\nbefore: function(req, res, context) {\n    return authenticate.then(function(authed) {\n        if(!authed) throw new ForbiddenError();\n\n        return context.continue;\n    });\n}\n```\n\n## REST API\n\nListing resources support filtering, searching, sorting, and pagination as described below.\n\n### Filtering\n\nAdd query parameters named after fields to limit results.\n\n```bash\n$ curl http://localhost/users?name=James+Conrad\n\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n[\n  {\n    \"name\": \"James Conrad\",\n    \"email\": \"jamesconrad@fastmail.fm\"\n  }\n]\n```\n\n### Search\n\nUse the `q` parameter to perform a substring search across all fields.\n\n```bash\n$ curl http://localhost/users?q=james\n\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n[\n  {\n    \"name\": \"James Conrad\",\n    \"email\": \"jamesconrad@fastmail.fm\"\n  }, {\n    \"name\": \"Jim Huntington\",\n    \"email\": \"jamesh@huntington.mx\"\n  }\n]\n```\n\nSearch behavior can be customized to change the parameter used for searching, as well as which attributes are included in the search, like so:\n\n```javascript\nvar users = rest.resource({\n    model: User,\n    endpoints: ['/users', '/users/:id'],\n    search: {\n      param: 'searchOnlyUsernames',\n      attributes: [ 'username' ]\n    }\n});\n```\n\nThis would restrict substring searches to the ```username``` attribute of the User model, and the search parameter would be 'searchOnlyUsernames':\n\n```bash\n$ curl http://localhost/users?searchOnlyUsernames=james\n```\n\nBy default, the substring search is performed using a ```{field} LIKE '%{query}%'``` pattern. However, this behavoir can be customized by specifying a search operator. Valid operators include: `$ne`, `$not`, `$gte`, `$gt`, `$lte`, `$lt`, `$like` (default), `$ilike`/`$iLike`, `$notLike`, `$notILike`. For instance:\n\n```javascript\nvar users = rest.resource({\n    model: User,\n    endpoints: ['/users', '/users/:id'],\n    search: {\n      operator: '$gt',\n      attributes: [ 'age' ]\n    }\n});\n```\n\n### Sorting\n\nSpecify the `sort` parameter to sort results.  Values are field names, optionally preceded by a `-` to indicate descending order.  Multiple sort values may be separated by `,`.\n\n```bash\n$ curl http://localhost/users?sort=-name\n\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n[\n  {\n    \"name\": \"Jim Huntington\",\n    \"email\": \"jamesh@huntington.mx\"\n  }, {\n    \"name\": \"James Conrad\",\n    \"email\": \"jamesconrad@fastmail.fm\"\n  }\n]\n```\n\nSort behavior can be customized to change the parameter used for sorting, as well as which attributes are allowed to be used for sorting like so:\n\n```javascript\nvar users = rest.resource({\n    model: User,\n    endpoints: ['/users', '/users/:id'],\n    sort: {\n      param: 'orderby',\n      attributes: [ 'username' ]\n    }\n});\n```\n\nThis would restrict sorting to only the ```username``` attribute of the User model, and the sort parameter would be 'orderby':\n\n```bash\n$ curl http://localhost/users?orderby=username\n```\n\nDefault sort criteria can be defined with the `default` attribute. The expected format for default sort criteria is exactly the same as if it was proceeding the `sort` parameter in the URL.\n\n```javascript\nvar users = rest.resource({\n    model: User,\n    endpoints: ['/users', '/users/:id'],\n    sort: {\n      default: '-email,username'\n    }\n});\n```\nWith this configuration, these two calls would result in the same data:\n\n```bash\n$ curl http://localhost/users\n$ curl http://localhost/users?sort=-email,username\n```\n\nNote that the `sort` parameter in the URL will override your default criteria.\n\nBy default all attributes defined on the model are allowed to be sorted on. Sorting on a attribute not allowed will cause a 400 error to be returned with errors in the format:\n\n```bash\n$ curl http://localhost/users?sortby=invalid,-otherinvalid,valid\n\nHTTP/1.1 400 BAD REQUEST\nContent-Type: application/json\n\n{\n  \"message\": \"Sorting not allowed on given attributes\",\n  \"errors\": [\"invalid\", \"otherinvalid\"]\n}\n```\n\n### Pagination\n\nList routes support pagination via `offset` or `page` and `count` query parameters.  Find metadata about pagination and number of results in the `Content-Range` response header. Pagination defaults to a default of 100 results per page, and a maximum of 1000 results per page.\n\n```bash\n# get the third page of results\n$ curl http://localhost/users?offset=200&count=100\n\nHTTP/1.1 200 OK\nContent-Type: application/json\nContent-Range: items 200-299/3230\n\n[\n  { \"name\": \"James Conrad\", ... },\n  ...\n]\n```\n\nAlternatively, you can specify that pagination is disabled for a given resource by passing false to the pagination property like so:\n\n```javascript\nvar users = rest.resource({\n    model: User,\n    endpoints: ['/users', '/users/:id'],\n    pagination: false\n});\n```\n\n## Epilogue API\n\n#### initialize()\n\nSet defaults and give epilouge a reference to your express app.  Send the following parameters:\n\n> ###### app\n>\n> A reference to the Express application\n>\n> ###### base\n>\n> Prefix to prepend to resource endpoints\n>\n> ###### updateMethod\n>\n> HTTP method to use for update routes, one of `POST`, `PUT`, or `PATCH`\n\n#### resource()\n\nCreate a resource and CRUD actions given a Sequelize model and endpoints.  Accepts these parameters:\n\n> ###### model\n>\n> Reference to a Sequelize model\n>\n> ###### endpoints\n>\n> Specify endpoints as an array with two sinatra-style URL paths in plural and singular form (e.g., `['/users', '/users/:id']`).\n>\n> ###### actions\n>\n> Create only the specified list of actions for the resource.  Options include `create`, `list`, `read`, `update`, and `delete`.  Defaults to all.\n\n\n### Milestones & Context\n\nCheck out the [Milestone docs](/docs/Milestones.md)\n\n## License\n\nCopyright (C) 2012-2015 David Chester\nCopyright (C) 2014-2015 Matt Broadstone\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "epilogue@0.5.2",
  "dist": {
    "shasum": "bda8d9e0abf5977613ab7ce2aec641bf9dcb8e36"
  },
  "_from": "epilogue@",
  "_resolved": "https://registry.npmjs.org/epilogue/-/epilogue-0.5.2.tgz"
}
