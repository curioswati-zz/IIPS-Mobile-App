{
  "name": "sequelize-cli",
  "version": "1.7.4",
  "description": "The sequelize CLI.",
  "main": "index.js",
  "dependencies": {
    "bluebird": "^2.3.11",
    "cli-color": "~0.3.2",
    "findup-sync": "^0.2.1",
    "fs-extra": "^0.16.3",
    "gulp": "^3.8.10",
    "gulp-help": "~1.3.1",
    "js-beautify": "^1.5.4",
    "lodash": "^3.0.1",
    "moment": "^2.9.0",
    "resolve": "^1.0.0",
    "umzug": "^1.6.0",
    "yargs": "^1.3.3"
  },
  "devDependencies": {
    "coffee-script": "^1.9.0",
    "expect.js": "~0.3.1",
    "gulp": "^3.8.11",
    "gulp-jscs": "^1.5.1",
    "gulp-jshint": "^1.10.0",
    "gulp-jshint-instafail": "^1.0.0",
    "gulp-markdown-code-blocks": "^1.1.0",
    "gulp-mocha": "^2.0.0",
    "js2coffee": "^2.0.0",
    "jshint-stylish": "^1.0.0",
    "mocha": "^2.1.0",
    "mysql": "^2.5.4",
    "nodeify": "^1.0.0",
    "pg": "^4.2.0",
    "pg-hstore": "^2.3.1",
    "run-sequence": "^1.0.2",
    "sequelize": "^2.0.0-rc3",
    "sqlite3": "^3.0.4",
    "through2": "^0.6.3"
  },
  "scripts": {
    "test": "gulp"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/sequelize/cli.git"
  },
  "keywords": [
    "sequelize",
    "cli"
  ],
  "author": {
    "name": "Sascha Depold"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/sequelize/cli/issues"
  },
  "homepage": "https://github.com/sequelize/cli",
  "bin": {
    "sequelize": "bin/sequelize"
  },
  "readme": "# sequelize/cli [![Build Status](https://travis-ci.org/sequelize/cli.svg?branch=master)](https://travis-ci.org/sequelize/cli) [![Code Climate](https://codeclimate.com/github/sequelize/cli.png)](https://codeclimate.com/github/sequelize/cli)\n\nThe Sequelize Command Line Interface (CLI)\n\n## Installation\n\nInstall this globally and you'll have access to the `sequelize` command anywhere on your system.\n\n```\nnpm install -g sequelize-cli\n```\n\nor install it locally to your `node_modules` folder\n\n```bash\nnpm install --save sequelize-cli\n```\n## Global Install Usage\n\n```\n$ sequelize [--HARMONY-FLAGS]\n```\n\n\n```\nSequelize [Node: 0.10.36, CLI: 1.7.0, ORM: 2.0.2]\n\n\nUsage\n  sequelize [task]\n\nAvailable tasks\n  db:migrate             Run pending migrations.\n  db:migrate:old_schema  Update legacy migration table\n  db:migrate:undo        Revert the last migration run.\n  db:migrate:undo:all    Revert all migrations ran.\n  help                   Display this help text. Aliases: h\n  init                   Initializes the project.\n  init:config            Initializes the configuration.\n  init:migrations        Initializes the migrations.\n  init:models            Initializes the models.\n  migration:create       Generates a new migration file. Aliases: migration:generate\n  model:create           Generates a model and its migration. Aliases: model:generate\n  version                Prints the version number. Aliases: v\n\nAvailable manuals\n  help:db:migrate             The documentation for \"sequelize db:migrate\".\n  help:db:migrate:old_schema  The documentation for \"sequelize db:migrate:old_schema\".\n  help:db:migrate:undo        The documentation for \"sequelize db:migrate:undo\".\n  help:db:migrate:undo:all    The documentation for \"sequelize db:migrate:undo:all\".\n  help:init                   The documentation for \"sequelize init\".\n  help:init:config            The documentation for \"sequelize init:config\".\n  help:init:migrations        The documentation for \"sequelize init:migrations\".\n  help:init:models            The documentation for \"sequelize init:models\".\n  help:migration:create       The documentation for \"sequelize migration:create\".\n  help:model:create           The documentation for \"sequelize model:create\".\n  help:version                The documentation for \"sequelize version\".\n```\n\n## Local Install Usage\n\n```\n$ node_modules/.bin/sequelize [--HARMONY-FLAGS]\n```\n\n## Options\n\nThe manuals will show all the flags and options which are available for the respective tasks.\nIf you find yourself in a situation where you always define certain flags in order to\nmake the CLI compliant to your project, you can move those definitions also into a file called\n`.sequelizerc`. The file will get `require`d if available and can therefore be either a JSON file\nor a Node.JS script that exports a hash.\n\n### Example for a Node.JS script\n\n```javascript\nvar path = require('path')\n\nmodule.exports = {\n  'config':          path.resolve('config', 'database.json'),\n  'migrations-path': path.resolve('db', 'migrate')\n}\n```\n\nThis will configure the CLI to always treat `config/database.json` as config file and\n`db/migrate` as the directory for migrations.\n\n### CoffeeScript support\n\nThe CLI is compatible with CoffeeScript. You can tell the CLI to enable that support via the `--coffee`\nflag. Please note that you'll need to install `js2coffee` and `coffee-script` for full support.\n\n### Configuration file\n\nBy default the CLI will try to use the file `config/config.json`. You can modify that path either via\nthe `--config` flag or via the option mentioned earlier. Here is how a configuration file might look\nlike (that's is the one that `sequelize init` generates:\n\n```json\n{\n  \"development\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"database_development\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"mysql\"\n  },\n  \"test\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"database_test\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"mysql\"\n  },\n  \"production\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"database_production\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"mysql\"\n  }\n}\n```\n\n\n### Configuration Connection String\n\nAs an alternative to the `--config` option with configuration files defining your database, you can\nuse the `--url` option to pass in a connection string. For example:\n\n`sequelize db:migrate --url 'mysql://root:password@mysql_host.com/database_name'`\n\n### Configuration Connection Environment Variable\n\nAnother possibility is to store the URL in an environment variable and to tell\nthe CLI to lookup a certain variable during runtime. Let's assume you have an\nenvironment variable called `DB_CONNECTION_STRING` which stores the value\n`mysql://root:password@mysql_host.com/database_name`. In order to make the CLI\nuse it, you have to use declare it in your config file:\n\n```\n{\n    \"production\": {\n        \"use_env_variable\": \"DB_CONNECTION_STRING\"\n    }\n}\n```\n\n### Migration storage\n\nBy default the CLI will create a table in your database called `SequelizeMeta` containing an entry\nfor each executed migration.  Using `migrationStorage` in the configuration file you can have the\nCLI create a JSON file which will contain an array with all the executed migrations.  You can\nspecify the path of the file using `migrationStoragePath` or the CLI will write to the file\n`sequelize-meta.json`.\n\n```json\n{\n  \"development\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"database_development\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"mysql\",\n    \"migrationStorage\": \"json\",\n    \"migrationStoragePath\": \"sequelize-meta.json\"\n  }\n}\n```\n\nIf you want to keep the information in the database and like to configure the way it's stored,\nyou can choose from the following configuration possibilites:\n\n```json\n{\n  \"development\": {\n    // Use a different table name. Default: SequelizeMeta\n    \"migrationStorageTableName\": \"sequelize_meta\"\n  }\n}\n```\n\n### Schema migration\n\nSince v1.0.0 the CLI supports a new schema for saving the executed migrations. It will tell you about that\nwhen you run a migration while having the old schema. You can opt-in for auto migrating the schema by adding a special property to your config file:\n\n```json\n{\n  \"development\": {\n    \"autoMigrateOldSchema\": true\n  }\n}\n```\n\n### The migration schema\n\nThe CLI uses [umzug](https://github.com/sequelize/umzug) and it's migration schema. This means a migration has too look like this:\n\n```javascript\n\"use strict\";\n\nmodule.exports = {\n  up: function(queryInterface, Sequelize, done) {\n    done();\n  },\n\n  down: function(queryInterface) {\n    return new Promise(function (resolve, reject) {\n      resolve();\n    });\n  }\n};\n```\n\nPlease note that you can either return a Promise or call the third argument of the function once your asynchronous logic was executed. If you pass something to the callback function (the `done` function) it will be treated as erroneous execution.\n\nAdditional note: If you need to access the sequelize instance, you can easily do that via `queryInterface.sequelize`.\n\n## Help\n\nRead the manuals via `sequelize help:<task-name>` for further information.\n",
  "readmeFilename": "README.md",
  "_id": "sequelize-cli@1.7.4",
  "_from": "sequelize-cli@"
}
