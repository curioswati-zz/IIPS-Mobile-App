{
  "name": "sequelize-restful-extended",
  "version": "0.1.4",
  "description": "A connect module that adds a restful API for all defined models to your application. Also allows to perform more complex operations",
  "main": "lib/index.js",
  "scripts": {
    "test": "node_modules/.bin/mocha"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/sequelize-restful-extended.git"
  },
  "author": {
    "name": "Pablo Anaya"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "dependencies": {
    "lodash": "~1.0.0-rc.3",
    "connect": "~2.7.2"
  },
  "devDependencies": {
    "mocha": "~1.17.0",
    "sequelize": "1.7.0-rc2",
    "mysql": "2.0.1",
    "expect.js": "~0.2.0"
  },
  "readme": "# sequelize-restful-extended\n\n[![Build Status](https://travis-ci.org/pjanaya/sequelize-restful-extended.svg?branch=master)](https://travis-ci.org/pjanaya/sequelize-restful-extended)\n\nA connect module based on a fork of sequelize-restful. Creates a restful API with associations from your Sequelize models and allows you to include parameters like `sort`, `offset`, `limit` and `order`. It also allows more complex operations like data range filters or include WHERE LIKE fields in SELECT operations.\n\nIt uses the Sequelize function `findAndCountAll` instead of `findAll`. Thanks to this, the basic GET request returns the total count of rows in the response. This number doesn't take account of the query parameters `offset` and `limit`. This feature makes easier to do pagination using the generated API.    \n\n## Usage\n\n```js\nvar express   = require('express')\n  , Sequelize = require('sequelize')\n  , http      = require('http')\n  , restful   = require('sequelize-restful-extended')\n  , sequelize = new Sequelize('database', 'username', 'password')\n  , app       = express()\n\n// define all your models before the configure block\n\napp.configure(function() {\n  app.use(restful(sequelize, { /* options */ }))\n})\n\nhttp.createServer(app).listen(app.get('port'), function(){\n  console.log(\"Express server listening on port \" + app.get('port'))\n})\n```\n\n## Options\n\n```js\n{\n  // Parameter:   endpoint\n  // Description: Define the path to the restful API.\n  // Default:     '/api'\n\n  endpoint: '/restful',\n\n  // Parameter:   allowed\n  // Description: Define which models will be exposed through the restful API\n  // Default:     'new Array()' if it is an Empty array, all the models will be exposed by default\n\n  allowed: new Array('Model0', 'Model1', 'Model2'),\n\n  // Parameter:   extendedMode\n  // Description: If it's true, all GET request uses the findAndCountAll function of Sequelize, \n  //              returning the count on the response. If it's false uses the default findAll.\n  // Default:     true\n\n  extendedMode: true\n}\n```\n\n## The API\n\n### GET /api\n\nReturns a list of all declared models\n\n```console\n$ curl http://localhost:3000/api\n```\n\n```js\n{\n  \"status\": \"success\"\n  \"data\": [\n    {\n      \"name\": \"Tag\",\n      \"tableName\": \"Tags\"\n    },\n    {\n      \"name\": \"Image\",\n      \"tableName\": \"Images\"\n    },\n    {\n      \"name\": \"Project\",\n      \"tableName\": \"Projects\"\n    }\n  ]\n}\n```\n\n### HEAD /api/Tags\n\nReturns a description of a declared model\n\n```console\n$ curl -i -X HEAD http://localhost:3000/api/Tags\n```\n\nThe result of the request is part of the response headers! The header's name is `Sequelize-Admin`.\n\n```js\n{\n  \"status\": \"success\",\n  \"data\": {\n    \"name\": \"Tag\",\n    \"tableName\": \"Tags\",\n    \"attributes\": {\n      \"title\": \"VARCHAR(255)\",\n      \"id\": {\n        \"type\": \"INTEGER\",\n        \"allowNull\": false,\n        \"primaryKey\": true,\n        \"autoIncrement\": true\n      },\n      \"createdAt\": {\n        \"type\": \"DATETIME\",\n        \"allowNull\": false\n      },\n      \"updatedAt\": {\n        \"type\": \"DATETIME\",\n        \"allowNull\": false\n      },\n      \"ProjectId\": {\n        \"type\": \"INTEGER\"\n      }\n    }\n  }\n}\n```\n\n### GET /api/Tags\n\nReturns all Tags\n\n```console\n$ curl http://localhost:3000/api/Tags\n```\n\n```js\n{\n  \"status\": \"success\",\n  \"count\": 3,\n  \"data\": [{\n    \"title\": \"foo\",\n    \"id\": 1,\n    \"createdAt\": \"2013-02-09T09:48:14.000Z\",\n    \"updatedAt\": \"2013-02-09T09:48:14.000Z\",\n    \"ProjectId\": 1\n  },{\n    \"title\": \"foo2\",\n    \"id\": 2,\n    \"createdAt\": \"2013-02-10T09:48:14.000Z\",\n    \"updatedAt\": \"2013-02-10T09:48:14.000Z\",\n    \"ProjectId\": 2\n  },{\n    \"title\": \"foo3\",\n    \"id\": 3,\n    \"createdAt\": \"2013-02-11T09:48:14.000Z\",\n    \"updatedAt\": \"2013-02-11T09:48:14.000Z\",\n    \"ProjectId\": 2\n  }]\n}\n```\n\n### GET /api/Tags?sort=-title\n\nReturns all Tags sorted by title descending\n\n```console\n$ curl http://localhost:3000/api/Tags?sort=-title\n```\n\n```js\n{\n  \"status\": \"success\",\n  \"count\": 3,\n  \"data\": [{\n    \"title\": \"foo3\",\n    \"id\": 3,\n    \"createdAt\": \"2013-02-11T09:48:14.000Z\",\n    \"updatedAt\": \"2013-02-11T09:48:14.000Z\",\n    \"ProjectId\": 2\n  },{\n    \"title\": \"foo2\",\n    \"id\": 2,\n    \"createdAt\": \"2013-02-10T09:48:14.000Z\",\n    \"updatedAt\": \"2013-02-10T09:48:14.000Z\",\n    \"ProjectId\": 2\n  },{\n    \"title\": \"foo\",\n    \"id\": 1,\n    \"createdAt\": \"2013-02-09T09:48:14.000Z\",\n    \"updatedAt\": \"2013-02-09T09:48:14.000Z\",\n    \"ProjectId\": 1\n  }]\n}\n```\n\n### GET /api/Tags?title=foo\n\nReturns all Tags where title is foo\n\n```console\n$ curl http://localhost:3000/api/Tags?title=foo\n```\n\n```js\n{\n  \"status\": \"success\",\n  \"count\": 1,\n  \"data\": {\n    \"title\": \"foo\",\n    \"id\": 1,\n    \"createdAt\": \"2013-02-09T09:48:14.000Z\",\n    \"updatedAt\": \"2013-02-09T09:48:14.000Z\",\n    \"ProjectId\": 1\n  }\n}\n```\n\n### GET /api/Tags?title_like=foo\n\nReturns all Tags where title is LIKE foo (in this example, all of them)\n\n```console\n$ curl http://localhost:3000/api/Tags?title_like=foo\n```\n\n```js\n{\n  \"status\": \"success\",\n  \"count\": 3,\n  \"data\": [{\n    \"title\": \"foo\",\n    \"id\": 1,\n    \"createdAt\": \"2013-02-09T09:48:14.000Z\",\n    \"updatedAt\": \"2013-02-09T09:48:14.000Z\",\n    \"ProjectId\": 1\n  },{\n    \"title\": \"foo2\",\n    \"id\": 2,\n    \"createdAt\": \"2013-02-10T09:48:14.000Z\",\n    \"updatedAt\": \"2013-02-10T09:48:14.000Z\",\n    \"ProjectId\": 2\n  },{\n    \"title\": \"foo3\",\n    \"id\": 3,\n    \"createdAt\": \"2013-02-11T09:48:14.000Z\",\n    \"updatedAt\": \"2013-02-11T09:48:14.000Z\",\n    \"ProjectId\": 2\n  }]\n}\n```\n\n### GET /api/Tags?limit=2\n\nReturns the first two tags (Notice the count attribute in the response indicating the total tags)\n\n```console\n$ curl http://localhost:3000/api/Tags?limit=2\n```\n\n```js\n{\n  \"status\": \"success\",\n  \"count\": 3,\n  \"data\": [{\n    \"title\": \"foo\",\n    \"id\": 1,\n    \"createdAt\": \"2013-02-09T09:48:14.000Z\",\n    \"updatedAt\": \"2013-02-09T09:48:14.000Z\",\n    \"ProjectId\": 1\n  },{\n    \"title\": \"foo2\",\n    \"id\": 2,\n    \"createdAt\": \"2013-02-10T09:48:14.000Z\",\n    \"updatedAt\": \"2013-02-10T09:48:14.000Z\",\n    \"ProjectId\": 2\n  }]\n}\n```\n\n\n### GET /api/Tags?limit=2&offset=2\n\nReturns the first two tags after a specific amount of elements (Notice the count attribute in the response indicating the total tags)\n\n```console\n$ curl http://localhost:3000/api/Tags?limit=2&offset=2\n```\n\n```js\n{\n  \"status\": \"success\",\n  \"count\": 3,\n  \"data\": {\n    \"title\": \"foo3\",\n    \"id\": 3,\n    \"createdAt\": \"2013-02-11T09:48:14.000Z\",\n    \"updatedAt\": \"2013-02-11T09:48:14.000Z\",\n    \"ProjectId\": 2\n  }\n}\n```\n### GET /api/Tags?createdAt_start=2013-02-11&createdAt_end=2013-02-12\n\nReturns all tags created between two dates\n\n```console\n$ curl http://localhost:3000/api/Tags?createdAt_start=2013-02-11&createdAt_end=2013-02-12\n```\n\n```js\n{\n  \"status\": \"success\",\n  \"count\": 1,\n  \"data\": {\n    \"title\": \"foo3\",\n    \"id\": 3,\n    \"createdAt\": \"2013-02-11T09:48:14.000Z\",\n    \"updatedAt\": \"2013-02-11T09:48:14.000Z\",\n    \"ProjectId\": 2\n  }\n}\n```\n\n### GET /api/Tags/1\n\nReturns the data of the Tag with the id 1.\n\n```console\n$ curl http://localhost:3000/api/Tags/1\n```\n\n```js\n{\n  \"status\": \"success\",\n  \"data\": {\n    \"title\": \"foo\",\n    \"id\": 1,\n    \"createdAt\": \"2013-02-09T09:48:14.000Z\",\n    \"updatedAt\": \"2013-02-09T09:48:14.000Z\",\n    \"ProjectId\": 1\n  }\n}\n```\n\n### POST /api/Tags\n\nCreating a new instance of a model\n\n```console\ncurl -d \"title=hallo%20world\" http://localhost:3000/api/Tags\n```\n\n```js\n{\n  \"status\": \"success\",\n  \"data\": {\n    \"title\": \"hallo world\",\n    \"id\": 1,\n    \"createdAt\": \"2013-02-09T09:48:14.000Z\",\n    \"updatedAt\": \"2013-02-09T09:48:14.000Z\"\n  }\n}\n```\n\n### PUT /api/Tags/1\n\nUpdating an already existing instance of a model\n\n```console\ncurl -d \"title=fnord\" -X PUT http://localhost:3000/api/Tags/1\n```\n\nIt returns the updated record\n\n```js\n{\n  \"status\": \"success\",\n  \"data\": {\n    \"title\": \"fnord\",\n    \"id\": 1,\n    \"createdAt\": \"2013-02-14T19:52:04.000Z\",\n    \"updatedAt\": \"2013-02-14T19:53:30.066Z\",\n    \"ProjectId\": 1\n  }\n}\n```\n\n### DELETE /api/Tags/1\n\nDeleting an existing instance of a model\n\n```console\ncurl -i -X DELETE http://localhost:3000/admin/api/Tags/3\n```\n\n```js\n{\n  \"status\": \"success\",\n  \"data\": {}\n}\n```\n\n## The API for Associations\n\n### GET /api/Projects/1/Tags\n\nReturns all the instance of 'associated_dao_factory' associated to the instance 1 of 'dao_factory'\n\n```console\ncurl -i -X GET http://localhost:3000/admin/api/Projects/1/Tags\n\n```\n\n```js\n{\n  \"status\": \"success\",\n  \"data\": {\n    \"title\": \"foo\",\n    \"id\": 1,\n    \"createdAt\": \"2013-02-09T09:48:14.000Z\",\n    \"updatedAt\": \"2013-02-09T09:48:14.000Z\",\n    \"ProjectId\": 1\n  }\n}\n```\n\n### DELETE /api/Photo/1/Photographer\n\nDeleting an existing association for 1:1 or N:1 association.\n\n```console\ncurl -i -X DELETE http://localhost:3000/admin/api/Photo/1/Photographer\n```\n\n```js\n{\n  \"status\": \"success\",\n  \"data\": {}\n}\n```\n\n### DELETE /api/Projects/1/Tags/1\n\nDeleting an existing association between instances\n\n```console\ncurl -i -X DELETE http://localhost:3000/admin/api/Projects/1/Tags/3\n```\n\n```js\n{\n  \"status\": \"success\",\n  \"data\": {}\n}\n```\n",
  "_id": "sequelize-restful-extended@0.1.4",
  "dist": {
    "shasum": "ba5e5438891e8a654d83d2ce3d29791eac6009a8"
  },
  "_from": "sequelize-restful-extended@",
  "_resolved": "https://registry.npmjs.org/sequelize-restful-extended/-/sequelize-restful-extended-0.1.4.tgz"
}
