{
  "name": "dottie",
  "version": "0.3.1",
  "devDependencies": {
    "benchmark": "^1.0.0",
    "expect.js": "~0.2.0",
    "microtime": "^1.2.0",
    "mocha": "~1.14.0"
  },
  "description": "Object traversing/manipulation util",
  "author": {
    "name": "Mick Hansen",
    "email": "maker@mhansen.io"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mickhansen/dottie.js.git"
  },
  "main": "dottie.js",
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha -t 5000 -s 100 --reporter spec test/"
  },
  "readme": "[![Build Status](https://travis-ci.org/mickhansen/dottie.js.png)](https://travis-ci.org/mickhansen/dottie.js.png)\n\n## Install\n    npm install dottie\n\n## Usage\nFor detailed usage, check source or tests.\n\n### Get value\nGets nested value, or undefined if unreachable, or a default value if passed.\n\n```js\nvar values = {\n  some: {\n    nested: {\n        key: 'foobar';\n    }\n  },\n  'some.dot.included': {\n    key: 'barfoo'\n  }\n}\n\ndottie.get(values, 'some.nested.key'); // returns 'foobar'\ndottie.get(values, 'some.undefined.key'); // returns undefined\ndottie.get(values, 'some.undefined.key', 'defaultval'); // returns 'defaultval'\ndottie.get(values, ['some.dot.included', 'key']); // returns 'barfoo'\n```\n\n### Set value\nSets nested value, creates nested structure if needed\n\n```js\ndottie.set(values, 'some.nested.value', someValue);\ndottie.set(values, ['some.dot.included', 'value'], someValue);\n```\n\n### Transform object\nTransform object from keys with dottie notation to nested objects\n\n```js\nvar values = {\n  'user.name': 'Gummy Bear',\n  'user.email': 'gummybear@candymountain.com',\n  'user.professional.title': 'King',\n  'user.professional.employer': 'Candy Mountain'\n};\nvar transformed = dottie.transform(values);\n\n/*\n{\n  user: {\n    name: 'Gummy Bear',\n    email: 'gummybear@candymountain.com',\n    professional: {\n      title: 'King',\n      employer: 'Candy Mountain'\n    }\n  }\n}\n*/\n```\n\n#### With a custom delimiter\n\n```js\nvar values = {\n  'user_name': 'Mick Hansen',\n  'user_email': 'maker@mhansen.io'\n};\nvar transformed = dottie.transform(values, { delimiter: '_' });\n\n/*\n{\n  user: {\n    name: 'Mick Hansen',\n    email: 'maker@mhansen.io'\n  }\n}\n*/\n```\n\n## Performance\n\n`0.3.1` and up ships with `dottie.memoizePath: true` by default, if this causes any bugs, please try setting it to false\n\n## License\n\n[MIT](https://github.com/mickhansen/dottie.js/blob/master/LICENSE)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mickhansen/dottie.js/issues"
  },
  "homepage": "https://github.com/mickhansen/dottie.js#readme",
  "_id": "dottie@0.3.1",
  "_from": "dottie@>=0.3.1 <0.4.0"
}
