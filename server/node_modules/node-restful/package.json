{
  "name": "node-restful",
  "description": "A library for making REST API's in node.js with express",
  "version": "0.2.2",
  "peerDependencies": {
    "mongoose": "~4"
  },
  "devDependencies": {
    "express": "4.12.4",
    "body-parser": "1.12.4",
    "method-override": "2.3.3",
    "mongodb": "2.0.33",
    "jade": "1.11.0",
    "mocha": "2.2.5",
    "mongoose": "~4",
    "should": "6.0.3",
    "supertest": "1.0.1",
    "sinon": "1.15.3",
    "pow-mongodb-fixtures": "git+https://github.com/riyadhalnur/pow-mongodb-fixtures.git#upgrade-mongodb-drivers",
    "morgan": "1.5.3"
  },
  "keywords": [
    "node-restful",
    "restful",
    "framework",
    "rest",
    "api"
  ],
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/baugarten/node-restful"
  },
  "main": "index.js",
  "dependencies": {
    "underscore": "1.8.3"
  },
  "readme": "[![build status](https://secure.travis-ci.org/baugarten/node-restful.png?branch=master)](http://travis-ci.org/baugarten/node-restful)\n\nnode-restful\n============\n\nCreate awesome APIs using express.\n\nRegister mongoose resources and default RESTful routes are automatically made\n\n```js\nvar express = require('express'),\n    bodyParser = require('body-parser'),\n    methodOverride = require('method-override'),\n    morgan = require('morgan'),\n    restful = require('node-restful'),\n    mongoose = restful.mongoose;\nvar app = express();\n\napp.use(morgan('dev'));\napp.use(bodyParser.urlencoded({'extended':'true'}));\napp.use(bodyParser.json());\napp.use(bodyParser.json({type:'application/vnd.api+json'}));\napp.use(methodOverride());\n\nmongoose.connect(\"mongodb://localhost/resources\");\n\nvar Resource = app.resource = restful.model('resource', mongoose.Schema({\n    title: String,\n    year: Number,\n  }))\n  .methods(['get', 'post', 'put', 'delete']);\n\nResource.register(app, '/resources');\n\napp.listen(3000);\n```\n\nRegisters the following routes:\n\n    GET /resources\n    GET /resources/:id\n    POST /resources\n    PUT /resources/:id\n    DELETE /resources/:id\n\nwhich do exactly what you think they do!\n\nThe best part is that `restful.model` returns a Mongoose model, so you can interact with it the same way that you're already accustomed to! (i.e. `new Resource`, `Resource.findById`, etc.)\n\n## Support\n\nThis library is currently supported through complaint driven development, so if you see something, have a feature request, open an issue and if it seems to jive with the mission of the library, I'll prioritize it.\n\n## Install\n\n```\nnpm install node-restful\n```\n\n## Usage\n\nThere is a good example application under examples/movies.\n\nI will also show some features and use cases for them, how to set up routes, etc.\n\n### API\n\nThere are a few functions that are available after we register the mongoose schema. The first one we already saw. \n\n`.methods([...])` takes a list of methods that should be available on the resource. Future calls to methods will override previously set values\nTo disallow `delete` operations, simply run\n\n```js\nResource.methods(['get', 'post', 'put'])\n```\n    \nWe can also run custom routes. We can add custom routes by calling `.route(path, handler)`\n\n```js\nResource.route('recommend', function(req, res, next) {\n  res.send('I have a recommendation for you!');\n});\n```\n\nThis will set up a route at `/resources/recommend`, which will be called on all HTTP methods. We can also restrict the HTTP method by adding it to the path:\n\n```js\nResource.route('recommend.get', function(req, res, next) {\n   res.send('GET a recommendation');\n});\nResource.route('recommend', ['get', 'put', 'delete'], function(req, res, next) { ... });\n```\n    \nOr do some combination of HTTP methods.\n\nNow. Lets say we have to run arbitrary code before or after a route. Lets say we need to hash a password before a POST or PUT operation. Well, easy.\n\n```js\nResource.before('post', hash_password)\n  .before('put', hash_password);\n      \nfunction hash_password(req, res, next) {\n  req.body.password = hash(req.body.password);\n  next();\n}\n```\n\nBoy. That was easy. What about doing stuff after request, but before its sent back to the user? Restful stores the bundle of data to be returned in `res.locals` (see [express docs](http://expressjs.com/api.html#res.locals)). `res.locals.status_code` is the returned status code and `res.locals.bundle` is the bundle of data. In every before and after call, you are free to modify these are you see fit!\n\n```js\nResource.after('get', function(req, res, next) {\n  var tmp = res.locals.bundle.title; // Lets swap the title and year fields because we're funny!\n  res.locals.bundle.title = res.locals.bundle.year;\n  res.locals.bundle.year = tmp;\n  next(); // Don't forget to call next!\n});\n    \nResource.after('recommend', do_something); // Runs after all HTTP verbs\n```\n\nNow, this is all great. But up until now we've really only talked about defining list routes, those at `/resources/route_name`. We can also define detail routes. Those look like this\n\n```js\nResource.route('moreinfo', {\n    detail: true,\n    handler: function(req, res, next) {\n        // req.params.id holds the resource's id\n        res.send(\"I'm at /resources/:id/moreinfo!\")\n    }\n});\n```\nI don't think this is the prettiest, and I'd be open to suggestions on how to beautify detail route definition...\n\nAnd that's everything for now!\n\n### Built-in Filters\n\nNode-restful accepts many options to manipulate the list results. These options can be added to your request either via the querystring or the POST body. They are passed into the mongoose query to filter your resultset.\n\n#### Selecting the entity-properties you need\n\nIf you only need a few properties instead of the entire model, you can ask the service to only give just the properties you need:\n\nA `GET` request to `/users/?select=name%20email` will result in:\n\n```json\n[\n    {\n        \"_id\": \"543adb9c7a0f149e3ac29438\",\n        \"name\": \"user1\",\n        \"email\": \"user1@test.com\"\n    },\n    {\n        \"_id\": \"543adb9c7a0f149e3ac2943b\",\n        \"name\": \"user2\",\n        \"email\": \"user2@test.com\"\n    }\n]\n```\n\n#### Limiting the number and skipping items\n\nWhen implementing pagination you might want to use `skip` and `limit` filters. Both do exactly what their name says and just skip given amount of items or limit to a set amount of items.\n\n`/users/?limit=5` will give you the first 5 items  \n`/users/?skip=5` will skip the first 5 and give you the rest  \n`/users/?limit=5&skip=5` will skip the first 5 and then give you the second 5\n\n#### Sorting the result\n\nGetting a sorted list is as easy as adding a `sort` querystring parameter with the property you want to sort on. `/users/?sort=name` will give you a list sorted on the name property, with an ascending sort order.\n\nChanging the sort order uses the same rules as the string notation of [mongoose's sort filter](http://mongoosejs.com/docs/api.html#query_Query-sort). `/users/?sort=-name` will return the same list as before with a descending sort order.\n\n#### Filtering the results\n\nSometimes you just want to get all people older than 18, or you are want to get all people living in a certain city. Then you would want to \nuse filters for that. You can ask the service for equality, or values greater or less than, give it an array of values it should match to, or even a regex.\n\n| Filter                       | Query  | Example                                              | Description                     |\n|------------------------------|--------|------------------------------------------------------|---------------------------------|\n| **equal**                    | `equals` | `/users?gender=male` or `/users?gender__equals=male` | both return all male users      |\n| **not equal**                | `ne`     | `/users?gender__ne=male`                             | returns all users who are not male (`female` and `x`)        |\n| **greater than**             | `gt`     | `/users?age__gt=18`                                  | returns all users older than 18                                   |\n| **greater than or equal to** | `gte`    | `/users?age__gte=18`                                 | returns all users 18 and older (age should be a number property) |\n| **less than**                | `lt`     | `/users?age__lt=30`                                  | returns all users age 29 and younger                              |\n| **less than or equal to**    | `lte`    | `/users?age__lte=30`                                 | returns all users age 30 and younger                             |\n| **in**                       | `in`     | `/users?gender__in=female,male`                         | returns all female and male users                    |\n| **nin**                      | `nin`    | `/users?age__nin=18,30`                                 | returns all users with age other than 18 or 30                |\n| **Regex**                    | `regex`  | `/users?username__regex=/^baugarten/i` | returns all users with a username starting with baugarten           |\n\n### Populating a sub-entity\n\nWhen you have setup a mongoose Schema with properties referencing other entities, you can ask the service to populate them for you.\n\nA `GET` request to `/users/542edff9fffc55dd29d99346` will result in:\n\n```json\n{\n    \"_id\": \"542edff9fffc55dd29d99346\",\n    \"name\": \"the employee\",\n    \"email\": \"employee@company.com\",\n    \"boss\": \"542edff9fffc55dd29d99343\",\n    \"__v\": 0\n}\n```\nA `GET` request to `/users/542edff9fffc55dd29d99346?populate=boss` will result in:\n\n```json\n{\n    \"_id\": \"542edff9fffc55dd29d99346\",\n    \"name\": \"the employee\",\n    \"email\": \"employee@company.com\",\n    \"boss\": {\n        \"_id\": \"542edff9fffc55dd29d99343\",\n        \"name\": \"the boss\",\n        \"email\": \"boss@company.com\",\n        \"__v\": 0\n    },\n    \"__v\": 0\n}\n```\n\n\n\n---\n\n## Contributing\n\nYou can view the issue list for what I'm working on, or contact me to help!\n\nJust reach out to [me](https://github.com/baugarten)\n\n## MIT License\nCopyright (c) 2012 by Ben Augarten\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/baugarten/node-restful/issues"
  },
  "_id": "node-restful@0.2.2",
  "dist": {
    "shasum": "df88fcc62a87b87f0f2f88a925d5f1d229850aa5"
  },
  "_from": "node-restful@",
  "_resolved": "https://registry.npmjs.org/node-restful/-/node-restful-0.2.2.tgz"
}
